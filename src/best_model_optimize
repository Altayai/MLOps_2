import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import joblib
from pathlib import Path

# Veri seti yolu
feature_path = Path("data/processed/feature_data.csv")
df = pd.read_csv(feature_path)

# X, y ayır
X = df.drop("target", axis=1)
y = df["target"]

# Train/Test ayır
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# -------------------------
# 🔹 Modeller ve Parametre Gridleri
# -------------------------
models_params = {
    "RandomForest": (
        RandomForestClassifier(random_state=42),
        {
            "n_estimators": [50, 100, 200],
            "max_depth": [None, 5, 10],
            "min_samples_split": [2, 5],
        },
    ),
    "LogisticRegression": (
        LogisticRegression(max_iter=500),
        {
            "C": [0.01, 0.1, 1, 10],
            "solver": ["liblinear", "lbfgs"],
        },
    ),
}

best_model = None
best_score = 0
best_name = ""
best_params = {}

# -------------------------
# 🔹 GridSearch ile Model Karşılaştırması
# -------------------------
for name, (model, params) in models_params.items():
    print(f"\n🔍 {name} için GridSearch başlatılıyor...")
    grid = GridSearchCV(model, params, cv=5, scoring="accuracy", n_jobs=-1)
    grid.fit(X_train, y_train)

    y_pred = grid.best_estimator_.predict(X_test)
    acc = accuracy_score(y_test, y_pred)

    print(f"{name} - En iyi CV skoru: {grid.best_score_:.4f}")
    print(f"{name} - Test Accuracy: {acc:.4f}")
    print(f"{name} - En iyi parametreler: {grid.best_params_}")

    if acc > best_score:
        best_model = grid.best_estimator_
        best_score = acc
        best_name = name
        best_params = grid.best_params_

# -------------------------
# 🔹 En iyi modeli kaydet
# -------------------------
models_dir = Path("models")
models_dir.mkdir(parents=True, exist_ok=True)

best_model_path = models_dir / "best_model.joblib"
joblib.dump(best_model, best_model_path)

print("\n✅ En iyi model kaydedildi!")
print(f"Model: {best_name}")
print(f"Accuracy: {best_score:.4f}")
print(f"Params: {best_params}")
print(f"Dosya: {best_model_path}")
